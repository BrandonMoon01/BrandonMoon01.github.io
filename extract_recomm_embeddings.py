# -*- coding: utf-8 -*-
"""extract_recomm_embeddings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UuR6ez_GxB1CReT0crR4tycAIggkYhPl
"""

!pip install pyarrow zstandard

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

import pyarrow.feather as feather
import zstandard

import pyarrow.feather as feather
# CONTENT BASED EMBEDDINGS
# Specify the path to your .feather.zstd file
file_path = '/content/drive/Shareddrives/CSCE 470 Project/recomm.feather.zstd'

# Read the Feather file using pyarrow (which automatically handles decompression)
table = feather.read_table(file_path)

# Convert the table to a pandas DataFrame for easier viewing
all_recomm_embeds = table.to_pandas()

# Print or manipulate the DataFrame as needed
print(all_recomm_embeds)
# James Charles UCucot-Zp428OwkyRm2I7v2Q
c = all_recomm_embeds[all_recomm_embeds['channelId'] == 'UCucot-Zp428OwkyRm2I7v2Q']
# there is no embedding for james charles

#extract embeds of only our top 1000

chan_file_path = '/content/drive/Shareddrives/CSCE 470 Project/1000_chanIDs.csv'

chan_ids = pd.read_csv(chan_file_path)

merged_df = pd.merge(all_recomm_embeds, chan_ids, left_on='channelId', right_on='Youtube Url', how='inner')

# Drop the redundant column
merged_df = merged_df.drop(columns='Youtube Url')
merged_df

from sklearn.metrics.pairwise import cosine_similarity

# Function to get recommendations based on cosine similarity
def get_channel_recommendations(channel_id, embeddings_df, top_n=5):
    # Find the index of the given channel
    channel_index = embeddings_df.index[embeddings_df['channelId'] == channel_id].tolist()[0]

    # Select the embeddings for the given channel
    channel_embeddings = embeddings_df.iloc[channel_index, 1:]  # Assuming embeddings start from the second column

    # Reshape the embeddings to a 2D array
    channel_embeddings = channel_embeddings.values.reshape(1, -1)

    # Calculate cosine similarity between the given channel and all other channels
    similarity_scores = cosine_similarity(channel_embeddings, embeddings_df.iloc[:, 1:])

    # Get indices of top_n most similar channels (excluding the channel itself)
    similar_channel_indices = similarity_scores.argsort()[0][-top_n-1:-1][::-1]

    # Get the channel_id of recommended channels
    recommended_channels = embeddings_df['channelId'].iloc[similar_channel_indices].tolist()

    return recommended_channels

# Example usage
# good test case is ColdplayVEVO UCDPM_n1atn2ijUwHd0NNRQw
channel_id = 'UCDPM_n1atn2ijUwHd0NNRQw'
recommendations = get_channel_recommendations(channel_id, merged_df)
print(f"Recommendations for channel {channel_id}: {recommendations}")
recommendations

# correlate chan ids to chan names

chan_names_file_path = '/content/drive/Shareddrives/CSCE 470 Project/1000_chan_names_IDs.csv'

chan_names_ids = pd.read_csv(chan_names_file_path)
chan_names_ids

matching_row = chan_names_ids[chan_names_ids['Youtube Url'] == channel_id]
username = matching_row['username'].values[0]
print('Recommendations for: ',username)
for rec in recommendations:
  #find corresponding username
  matching_row = chan_names_ids[chan_names_ids['Youtube Url'] == rec]
  username = matching_row['username'].values[0]
  print(username)